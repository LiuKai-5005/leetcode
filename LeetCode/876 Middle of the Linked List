876. Middle of the Linked List

#LinkedList
#easy

Approach 1: Use array to store and unwrap the linked list 

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def middleNode(self, head: ListNode) -> ListNode:
        ans = []
        while head:
            ans.append(head)
            head = head.next  
        return ans[len(ans)//2]


Approach 2: Use two series fast and slow to track the linked list [similar to two pointers]

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def middleNode(self, head: ListNode) -> ListNode: 
        fast = slow = head
        while fast and fast.next:
            slow = slow.next
            fast = fast.next.next
        return slow







